// Mocks generated by Mockito 5.3.0 from annotations
// in pluto_grid/test/src/manager/state/cell_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pluto_grid/pluto_grid.dart' as _i2;
import 'package:rxdart/rxdart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlutoGridStateManager_0 extends _i1.SmartFake
    implements _i2.PlutoGridStateManager {
  _FakePlutoGridStateManager_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePublishSubject_1<T> extends _i1.SmartFake
    implements _i3.PublishSubject<T> {
  _FakePublishSubject_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PlutoGridEventManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlutoGridEventManager extends _i1.Mock
    implements _i2.PlutoGridEventManager {
  @override
  _i2.PlutoGridStateManager get stateManager =>
      (super.noSuchMethod(Invocation.getter(#stateManager),
              returnValue: _FakePlutoGridStateManager_0(
                  this, Invocation.getter(#stateManager)))
          as _i2.PlutoGridStateManager);
  @override
  _i3.PublishSubject<_i2.PlutoGridEvent> get subject =>
      (super.noSuchMethod(Invocation.getter(#subject),
              returnValue: _FakePublishSubject_1<_i2.PlutoGridEvent>(
                  this, Invocation.getter(#subject)))
          as _i3.PublishSubject<_i2.PlutoGridEvent>);
  @override
  _i4.StreamSubscription<dynamic> get subscription =>
      (super.noSuchMethod(Invocation.getter(#subscription),
              returnValue: _FakeStreamSubscription_2<dynamic>(
                  this, Invocation.getter(#subscription)))
          as _i4.StreamSubscription<dynamic>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void init() => super.noSuchMethod(Invocation.method(#init, []),
      returnValueForMissingStub: null);
  @override
  void addEvent(_i2.PlutoGridEvent? event) =>
      super.noSuchMethod(Invocation.method(#addEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.StreamSubscription<_i2.PlutoGridEvent> listener(
          void Function(_i2.PlutoGridEvent)? onData) =>
      (super.noSuchMethod(Invocation.method(#listener, [onData]),
              returnValue: _FakeStreamSubscription_2<_i2.PlutoGridEvent>(
                  this, Invocation.method(#listener, [onData])))
          as _i4.StreamSubscription<_i2.PlutoGridEvent>);
}
